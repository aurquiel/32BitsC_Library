<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="allocator_8c" kind="file">
    <compoundname>allocator.c</compoundname>
    <includes refid="allocator_8h" local="yes">allocator.h</includes>
    <incdepgraph>
      <node id="5">
        <label>error.h</label>
        <link refid="error_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="0">
        <label>C:/Users/egomez/Documents/codeblocks/testc22/allocator.c</label>
        <link refid="allocator.c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>header.h</label>
        <link refid="header_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="allocator_8c_1a61c8a541e05ecc5e83e4453f88fe242e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* AllocatorMalloc</definition>
        <argsstring>(int64_t numberOfElements, int8_t typePointer)</argsstring>
        <name>AllocatorMalloc</name>
        <param>
          <type>int64_t</type>
          <declname>numberOfElements</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>typePointer</declname>
        </param>
        <briefdescription>
<para>This function is a wrapper of the malloc function, enhancing the notification error in case of NULL as result of the allocation process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfElements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typePointer</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the elements to be allocated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" line="3" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" bodystart="3" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="allocator_8c_1a8317bbf1374d8577e1a9f165a16e6ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** AllocatorMallocTwoDimension</definition>
        <argsstring>(int64_t numberOfElements, int8_t typePointer)</argsstring>
        <name>AllocatorMallocTwoDimension</name>
        <param>
          <type>int64_t</type>
          <declname>numberOfElements</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>typePointer</declname>
        </param>
        <briefdescription>
<para>This function is a wrapper of the malloc function to allocate an array of pointers, enhancing the notification error in case of NULL as result of the allocation process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfElements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typePointer</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the elements to be allocated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" line="47" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" bodystart="47" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* AllocatorCalloc</definition>
        <argsstring>(int64_t numberOfElements, int8_t typePointer)</argsstring>
        <name>AllocatorCalloc</name>
        <param>
          <type>int64_t</type>
          <declname>numberOfElements</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>typePointer</declname>
        </param>
        <briefdescription>
<para>This function is a wrapper of the calloc function, enhancing the notification error in case of NULL as result of the allocation process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfElements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typePointer</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the elements to be allocated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" line="91" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" bodystart="91" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="allocator_8c_1a2a2ce941856c07e1b58ae8012d403c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** AllocatorCallocTwoDimension</definition>
        <argsstring>(int64_t numberOfElements, int8_t typePointer)</argsstring>
        <name>AllocatorCallocTwoDimension</name>
        <param>
          <type>int64_t</type>
          <declname>numberOfElements</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>typePointer</declname>
        </param>
        <briefdescription>
<para>This function is a wrapper of the calloc function to allocate an array of pointers, enhancing the notification error in case of NULL as result of the allocation process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfElements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typePointer</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the elements to be allocated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" line="135" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" bodystart="135" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="allocator_8c_1a96639f50952fc722ccd3a3fbe17185ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* AllocatorRealloc</definition>
        <argsstring>(void *arrayAllocated, uint64_t numberOfElements, int8_t typePointer)</argsstring>
        <name>AllocatorRealloc</name>
        <param>
          <type>void *</type>
          <declname>arrayAllocated</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>numberOfElements</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>typePointer</declname>
        </param>
        <briefdescription>
<para>This function is a wrapper of the realloc function, enhancing the notification error in case of NULL as result of the allocation process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arrayAllocated</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array to be reallocated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfElements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typePointer</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the elements to be allocated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" line="179" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" bodystart="179" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="allocator_8c_1a72d2be9c4c232384a3c814f3d21e0475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AllocatorFree</definition>
        <argsstring>(void *arrayAllocated)</argsstring>
        <name>AllocatorFree</name>
        <param>
          <type>void *</type>
          <declname>arrayAllocated</declname>
        </param>
        <briefdescription>
<para>This function is a wrapper of the free function, enhancing the freeing process ensuring that the memory was released. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arrayAllocated</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array to be reallocated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" line="223" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c" bodystart="223" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="allocator_8h" kindref="compound">allocator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="allocator_8h_1a61c8a541e05ecc5e83e4453f88fe242e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="allocator_8c_1a61c8a541e05ecc5e83e4453f88fe242e" kindref="member">AllocatorMalloc</ref>(int64_t<sp/>numberOfElements,<sp/>int8_t<sp/>typePointer)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>auxiliarMemory<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numberOfElements<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43af79a4beb5b58709569843feb37ff4f18" kindref="member">errorSizeAllocator</ref>);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43a3c51c62c38b7cfcda4aae0aed4df9de1" kindref="member">errorTypeAllocator</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(auxiliarMemory<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43ab1fdf415ff67a6ae7d0925226816117e" kindref="member">errorNoAllocate</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxiliarMemory;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="allocator_8h_1a8317bbf1374d8577e1a9f165a16e6ec2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="allocator_8c_1a8317bbf1374d8577e1a9f165a16e6ec2" kindref="member">AllocatorMallocTwoDimension</ref>(int64_t<sp/>numberOfElements,<sp/>int8_t<sp/>typePointer)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>auxiliarMemory<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numberOfElements<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43af79a4beb5b58709569843feb37ff4f18" kindref="member">errorSizeAllocator</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t*));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t*));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t*));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t*));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t*));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t*));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t*));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t*));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)malloc(numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43a3c51c62c38b7cfcda4aae0aed4df9de1" kindref="member">errorTypeAllocator</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(auxiliarMemory<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43ab1fdf415ff67a6ae7d0925226816117e" kindref="member">errorNoAllocate</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxiliarMemory;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="allocator_8h_1afc1d49cedc81d980c36042da2b15eb81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(int64_t<sp/>numberOfElements,<sp/>int8_t<sp/>typePointer)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>auxiliarMemory<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numberOfElements<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43af79a4beb5b58709569843feb37ff4f18" kindref="member">errorSizeAllocator</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43a3c51c62c38b7cfcda4aae0aed4df9de1" kindref="member">errorTypeAllocator</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(auxiliarMemory<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43ab1fdf415ff67a6ae7d0925226816117e" kindref="member">errorNoAllocate</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxiliarMemory;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="allocator_8h_1a2a2ce941856c07e1b58ae8012d403c63" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="allocator_8c_1a2a2ce941856c07e1b58ae8012d403c63" kindref="member">AllocatorCallocTwoDimension</ref>(int64_t<sp/>numberOfElements,<sp/>int8_t<sp/>typePointer)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>auxiliarMemory<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numberOfElements<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43af79a4beb5b58709569843feb37ff4f18" kindref="member">errorSizeAllocator</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t*));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t*));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t*));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t*));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t*));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t*));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t*));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t*));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)calloc(numberOfElements,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43a3c51c62c38b7cfcda4aae0aed4df9de1" kindref="member">errorTypeAllocator</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(auxiliarMemory<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43ab1fdf415ff67a6ae7d0925226816117e" kindref="member">errorNoAllocate</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxiliarMemory;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="allocator_8h_1a96639f50952fc722ccd3a3fbe17185ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="allocator_8c_1a96639f50952fc722ccd3a3fbe17185ee" kindref="member">AllocatorRealloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arrayAllocated,<sp/>uint64_t<sp/>numberOfElements,<sp/>int8_t<sp/>typePointer)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>auxiliarMemory<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numberOfElements<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43af79a4beb5b58709569843feb37ff4f18" kindref="member">errorSizeAllocator</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((int8_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((uint8_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((int16_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((uint16_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((int32_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((uint32_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((int64_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((uint64_t*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarMemory<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)realloc((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)arrayAllocated,numberOfElements*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43a3c51c62c38b7cfcda4aae0aed4df9de1" kindref="member">errorTypeAllocator</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(auxiliarMemory<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a552408be2f80b353c540634daff9dc43ab1fdf415ff67a6ae7d0925226816117e" kindref="member">errorNoAllocate</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auxiliarMemory;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="allocator_8h_1a72d2be9c4c232384a3c814f3d21e0475" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="allocator_8c_1a72d2be9c4c232384a3c814f3d21e0475" kindref="member">AllocatorFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arrayAllocated)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>free(arrayAllocated);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>free(arrayAllocated);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/egomez/Documents/codeblocks/testc22/allocator.c"/>
  </compounddef>
</doxygen>
