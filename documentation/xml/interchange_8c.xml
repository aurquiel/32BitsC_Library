<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="interchange_8c" kind="file">
    <compoundname>interchange.c</compoundname>
    <includes refid="interchange_8h" local="yes">interchange.h</includes>
    <incdepgraph>
      <node id="42">
        <label>error.h</label>
        <link refid="error_8h"/>
      </node>
      <node id="39">
        <label>stdint.h</label>
      </node>
      <node id="38">
        <label>stdlib.h</label>
      </node>
      <node id="40">
        <label>allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>string.h</label>
      </node>
      <node id="41">
        <label>header.h</label>
        <link refid="header_8h"/>
      </node>
      <node id="35">
        <label>C:/Users/egomez/Documents/codeblocks/testc22/interchange.c</label>
        <link refid="interchange.c"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>interchange.h</label>
        <link refid="interchange_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="interchange_8c_1a9e274405dcce8ea3ff46c9ce42b3f64d" prot="public" static="no">
        <name>INTERCHANGE_C_INCLUDED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/interchange.c" line="2" column="9" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/interchange.c" bodystart="2" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="interchange_8c_1a78df5a9a347dd9e5d10aa2f9465ccdd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InterchangeTotalGeneric</definition>
        <argsstring>(void *a, void *b, int64_t sizeA, int64_t sizeB, int8_t typePointer)</argsstring>
        <name>InterchangeTotalGeneric</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>sizeA</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>sizeB</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>typePointer</declname>
        </param>
        <briefdescription>
<para>This function interchange the data between to pointers &quot;a&quot; and &quot;b&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array &quot;a&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array &quot;b&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeA</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of the array &quot;a&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeB</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of the array &quot;b&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typePointer</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the elements of the array &quot;a&quot; and &quot;b&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/egomez/Documents/codeblocks/testc22/interchange.c" line="6" column="1" bodyfile="C:/Users/egomez/Documents/codeblocks/testc22/interchange.c" bodystart="6" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>INTERCHANGE_C_INCLUDED</highlight></codeline>
<codeline lineno="2" refid="interchange_8c_1a9e274405dcce8ea3ff46c9ce42b3f64d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INTERCHANGE_C_INCLUDED</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interchange_8h" kindref="compound">interchange.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="interchange_8h_1a78df5a9a347dd9e5d10aa2f9465ccdd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interchange_8c_1a78df5a9a347dd9e5d10aa2f9465ccdd4" kindref="member">InterchangeTotalGeneric</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/>int64_t<sp/>sizeA,<sp/>int64_t<sp/>sizeB,<sp/>int8_t<sp/>typePointer)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((sizeA<sp/>&lt;=<sp/>0)<sp/>||<sp/>(sizeB<sp/>&lt;=<sp/>0)<sp/>||<sp/>(sizeA<sp/>!=<sp/>sizeB))</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a1829b01692ef234bb560acc5fc9e84f8a638ed4737c4e0f966af63906e8302442" kindref="member">errorSizeInterchange</ref>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*auxiliarArray;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a6f4197d6b79e7da9b2fbb5749c58d531" kindref="member">charPointer</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a03def4b5bd4d979bd9b7969e90616535" kindref="member">unsignedCharPointer</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(int8_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a98e410725d550632e5d197a5417c42c3" kindref="member">int8Pointer</ref>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(uint8_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8aab56cb5de46060fd08ce040e293f7faa" kindref="member">unsignedInt8Pointer</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(int8_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a4dbf24f3ef8ac2423a7278e0d364f32d" kindref="member">int16Pointer</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(uint16_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8ab2c46e6c27472c1b18b51b98f977e0ac" kindref="member">unsignedInt16Pointer</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(int32_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8078dcb6e7d898c4c3c953e3ef6424a2" kindref="member">int32Pointer</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(uint32_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a72992298d35ad881a65a1f99a159bf66" kindref="member">unsignedInt32Pointer</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(int64_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a8ad0d261549b4e2af3b7f9b0393fa557" kindref="member">int64Pointer</ref>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(uint64_t*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8af3f401d9b1ce030f968be8d120d98cbd" kindref="member">unsignedInt64Pointer</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a31dac678be9cf29ac1564744a0cc5fa5" kindref="member">floatPointer</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref><sp/>==<sp/>typePointer)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliarArray<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<ref refid="allocator_8c_1afc1d49cedc81d980c36042da2b15eb81" kindref="member">AllocatorCalloc</ref>(sizeA,<ref refid="header_8h_1a745d66fd03b426740db1f35b4b31b2f8a935ccfa9c5398e80b5d6571569deaa84" kindref="member">doublePointer</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(<ref refid="error_8h_1a1829b01692ef234bb560acc5fc9e84f8af8a405268fa24b215f1056ca4a3eef51" kindref="member">errorTypeInterchange</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(auxiliarArray,a,sizeA);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(a,b,sizeA);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(b,auxiliarArray,sizeA);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocator_8c_1a72d2be9c4c232384a3c814f3d21e0475" kindref="member">AllocatorFree</ref>(auxiliarArray);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>INTERCHANGE_C_INCLUDED</highlight></codeline>
    </programlisting>
    <location file="C:/Users/egomez/Documents/codeblocks/testc22/interchange.c"/>
  </compounddef>
</doxygen>
